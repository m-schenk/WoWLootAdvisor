{"version":3,"sources":["components/GetAllItems.js","components/DragAndDrop.js","App.js","serviceWorker.js","index.js"],"names":["GetAllItems","props","state","items","fetch","res","json","this","setState","className","map","item","href","id","key","name","Component","DragAndDrop","category","bgcolor","onDragStart","event","console","log","dataTransfer","setData","onDragOver","preventDefault","onDrop","cat","getData","filter","droppablePlaces","itemSearch","wishlist","itemPool","bin","forEach","push","e","draggable","style","backgroundColor","flexDirection","App","users","user","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.57ca56ef.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nlet DEV_URL = '';\r\n\r\nconst baseURL = \"https://classic.wowhead.com/item=\";\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n    DEV_URL  = 'http://localhost:3000';\r\n}\r\n\r\nexport default class GetAllItems extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            items: []\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const res = await fetch(`${DEV_URL}/items/`);\r\n        const items = await res.json();\r\n        this.setState({\r\n            items\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"GetAllItems\">\r\n                <p>\r\n                {this.state.items.map(item => (\r\n                    <a href={baseURL+item.id} key={item.id}>[{item.name}]</a>\r\n                ))}\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","\r\nimport React, { Component } from 'react';\r\n\r\nexport default class DragAndDrop extends Component {\r\n    state = {\r\n        items: [\r\n            {name:\"Ancient Qiraji Ripper\",category:\"itemSearch\", bgcolor: \"gray\"},\r\n            {name:\"React\", category:\"itemSearch\", bgcolor:\"gray\"},\r\n            {name:\"Vue\", category:\"itemSearch\", bgcolor:\"gray\"}\r\n            ]\r\n    }\r\n\r\n    onDragStart = (event, id) => {\r\n        console.log('dragstart:',id);\r\n        event.dataTransfer.setData(\"id\", id);\r\n    }\r\n\r\n    onDragOver = (event) => {\r\n        event.preventDefault();\r\n    }\r\n\r\n    onDrop = (event, cat) => {\r\n        let id = event.dataTransfer.getData(\"id\");\r\n\r\n        let items = this.state.items.filter((item) => {\r\n            if (item.name === id) {\r\n                item.category = cat;\r\n            }\r\n            return item;\r\n        });\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            items\r\n        });\r\n    }\r\n\r\n    render() {\r\n        var droppablePlaces = {\r\n            itemSearch: [],\r\n            wishlist: [],\r\n            itemPool: [],\r\n            bin: []\r\n        }\r\n\r\n        this.state.items.forEach ((item) => {\r\n            droppablePlaces[item.category].push(\r\n                <div key={item.name} \r\n                    onDragStart = {(e) => this.onDragStart(e, item.name)}\r\n                    draggable\r\n                    className=\"draggable\"\r\n                    style = {{backgroundColor: item.bgcolor, flexDirection: 'row'}}\r\n                >\r\n                    {item.name}\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div className=\"container-drag\">\r\n                <div className=\"wishlist\"\r\n                    onDragOver={(e)=>this.onDragOver(e)}\r\n                    onDrop={(e)=>{this.onDrop(e, \"wishlist\")}}>\r\n                    <span className=\"task-header\">wishlist</span>\r\n                    {droppablePlaces.wishlist}\r\n                </div>\r\n                <div className=\"itemSearch\" \r\n                    onDragOver={(e)=>this.onDragOver(e)}\r\n                    onDrop={(e)=>this.onDrop(e, \"itemSearch\")}>\r\n                        <span className=\"task-search\">itemSearch</span>\r\n                        {droppablePlaces.itemSearch}\r\n                </div>\r\n                <div className=\"itemPool\" \r\n                    onDragOver={(e)=>this.onDragOver(e)}\r\n                    onDrop={(e)=>this.onDrop(e, \"itemPool\")}>\r\n                        <span className=\"task-pool\">itemPool</span>\r\n                        {droppablePlaces.itemPool}\r\n                </div>\r\n                <div className=\"bin\" \r\n                    onDragOver={(e)=>this.onDragOver(e)}\r\n                    onDrop={(e)=>this.onDrop(e, \"bin\")}>\r\n                        <span className=\"task-bin\">bin</span>\r\n                        {droppablePlaces.bin}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport GetAllItems from './components/GetAllItems';\nimport \"./App.css\"\nimport DragAndDrop from './components/DragAndDrop';\n\nlet DEV_URL = '';\n\nif (process.env.NODE_ENV === 'development') {\n    DEV_URL  = 'http://localhost:3000';\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            users: []\n        };\n    }\n\n    async componentDidMount() {\n        const res = await fetch(`${DEV_URL}/users/`);\n        const users = await res.json();\n        this.setState({\n            users\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <ul>\n                {this.state.users.map(user => (\n                    <li key={user.id}>{user.name}</li>\n                ))}\n                </ul>\n            <GetAllItems />\n            <DragAndDrop />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}